import json
import os
from datetime import datetime
from typing import List, Optional, Dict
import logging

# Free and open-source notification system
# Uses file-based storage and web interface display instead of paid services

def save_report_notification(recipient: str, subject: str, body: str, report_type: str = "daily") -> bool:
    """
    Save report notification to file system (free alternative to email)
    Creates HTML and JSON files for easy viewing and data access
    """
    try:
        # Create reports directory if it doesn't exist
        reports_dir = "reports"
        if not os.path.exists(reports_dir):
            os.makedirs(reports_dir)
        
        # Generate timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        date_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Save as HTML file for easy viewing
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>{subject}</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .header {{ background-color: #f0f0f0; padding: 20px; border-radius: 5px; }}
                .content {{ margin: 20px 0; }}
                .footer {{ color: #666; font-size: 12px; margin-top: 30px; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h2>{subject}</h2>
                <p><strong>Generated:</strong> {date_str}</p>
                <p><strong>Recipient:</strong> {recipient}</p>
            </div>
            <div class="content">
                {body}
            </div>
            <div class="footer">
                <p>Generated by AI Trading Agent - Free & Open Source</p>
            </div>
        </body>
        </html>
        """
        
        # Save HTML file
        html_filename = f"{reports_dir}/{report_type}_report_{timestamp}.html"
        with open(html_filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        # Save metadata as JSON
        metadata = {
            "recipient": recipient,
            "subject": subject,
            "timestamp": date_str,
            "report_type": report_type,
            "html_file": html_filename,
            "body_preview": body[:200] + "..." if len(body) > 200 else body
        }
        
        json_filename = f"{reports_dir}/{report_type}_meta_{timestamp}.json"
        with open(json_filename, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2)
        
        logging.info(f"Report saved successfully: {html_filename}")
        return True
        
    except Exception as e:
        logging.error(f"Failed to save report notification: {e}")
        return False

def save_notification_message(recipient_phone: str, message: str, message_type: str = "alert") -> bool:
    """
    Save notification message to file system (free alternative to WhatsApp)
    Creates a message log that can be accessed through the web interface
    """
    try:
        # Create notifications directory
        notifications_dir = "notifications"
        if not os.path.exists(notifications_dir):
            os.makedirs(notifications_dir)
        
        # Generate timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        date_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Create notification data
        notification = {
            "recipient": recipient_phone,
            "message": message,
            "message_type": message_type,
            "timestamp": date_str,
            "status": "saved",
            "id": timestamp
        }
        
        # Save individual notification
        filename = f"{notifications_dir}/msg_{timestamp}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(notification, f, indent=2)
        
        # Update notifications index
        index_file = f"{notifications_dir}/index.json"
        notifications_index = []
        if os.path.exists(index_file):
            try:
                with open(index_file, 'r', encoding='utf-8') as f:
                    notifications_index = json.load(f)
            except:
                notifications_index = []
        
        notifications_index.append(notification)
        # Keep only last 100 notifications
        notifications_index = notifications_index[-100:]
        
        with open(index_file, 'w', encoding='utf-8') as f:
            json.dump(notifications_index, f, indent=2)
        
        logging.info(f"Notification saved successfully: {filename}")
        return True
        
    except Exception as e:
        logging.error(f"Failed to save notification: {e}")
        return False

def format_daily_report_html(market_summary: str, top_gainers: List[dict], top_losers: List[dict], ai_insights: dict) -> str:
    """
    Format daily market report as HTML for file storage
    """
    html_template = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            .header {{ background-color: #FF6B6B; color: white; padding: 20px; text-align: center; }}
            .section {{ margin: 20px 0; padding: 15px; border-left: 4px solid #FF6B6B; }}
            .metrics {{ display: flex; justify-content: space-around; margin: 20px 0; }}
            .metric {{ text-align: center; padding: 10px; background-color: #f8f9fa; border-radius: 5px; }}
            table {{ border-collapse: collapse; width: 100%; margin: 10px 0; }}
            th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
            th {{ background-color: #f2f2f2; }}
            .positive {{ color: green; }}
            .negative {{ color: red; }}
            .footer {{ margin-top: 30px; padding: 15px; background-color: #f8f9fa; text-align: center; }}
        </style>
    </head>
    <body>
        <div class="header">
            <h1>AI Trading Agent - Daily Market Report</h1>
            <p>Your personalized Indian market analysis</p>
        </div>
        
        <div class="section">
            <h2>Market Summary</h2>
            <p>{market_summary}</p>
        </div>
        
        <div class="section">
            <h2>Top Gainers</h2>
            <table>
                <tr><th>Symbol</th><th>Price</th><th>Change</th><th>% Change</th></tr>
    """
    
    # Add top gainers
    for gainer in top_gainers[:5]:
        html_template += f"""
                <tr>
                    <td>{gainer.get('Symbol', 'N/A')}</td>
                    <td>â‚¹{gainer.get('LTP', 0):.2f}</td>
                    <td class="positive">+â‚¹{gainer.get('Change', 0):.2f}</td>
                    <td class="positive">+{gainer.get('% Change', 0):.2f}%</td>
                </tr>
        """
    
    html_template += """
            </table>
        </div>
        
        <div class="section">
            <h2>Top Losers</h2>
            <table>
                <tr><th>Symbol</th><th>Price</th><th>Change</th><th>% Change</th></tr>
    """
    
    # Add top losers
    for loser in top_losers[:5]:
        html_template += f"""
                <tr>
                    <td>{loser.get('Symbol', 'N/A')}</td>
                    <td>â‚¹{loser.get('LTP', 0):.2f}</td>
                    <td class="negative">â‚¹{loser.get('Change', 0):.2f}</td>
                    <td class="negative">{loser.get('% Change', 0):.2f}%</td>
                </tr>
        """
    
    # Add AI insights if available
    ai_section = ""
    if ai_insights:
        sentiment = ai_insights.get('sentiment', 'neutral').title()
        probability = ai_insights.get('probability', 0) * 100
        direction = ai_insights.get('direction', 'sideways').title()
        
        ai_section = f"""
        <div class="section">
            <h2>AI Market Insights</h2>
            <div class="metrics">
                <div class="metric">
                    <h3>Market Sentiment</h3>
                    <p><strong>{sentiment}</strong></p>
                </div>
                <div class="metric">
                    <h3>Probability Score</h3>
                    <p><strong>{probability:.1f}%</strong></p>
                </div>
                <div class="metric">
                    <h3>Expected Direction</h3>
                    <p><strong>{direction}</strong></p>
                </div>
            </div>
            <p>{ai_insights.get('analysis', 'AI analysis not available')}</p>
        </div>
        """
    
    html_template += ai_section
    
    html_template += """
        <div class="footer">
            <p><strong>AI Trading Agent</strong> | Automated Market Intelligence</p>
            <p>This report was generated automatically. Please do your own research before making investment decisions.</p>
        </div>
    </body>
    </html>
    """
    
    return html_template

def format_notification_message(market_summary: str, nifty_change: float, top_gainer: str, top_loser: str) -> str:
    """
    Format notification message for file storage
    """
    emoji = "ðŸ“ˆ" if nifty_change >= 0 else "ðŸ“‰"
    direction = "up" if nifty_change >= 0 else "down"
    
    message = f"""AI Trading Agent - Morning Brief

{emoji} Market Update
NIFTY 50: {direction} {abs(nifty_change):.2f}%

ðŸ“ˆ Top Gainer: {top_gainer}
ðŸ“‰ Top Loser: {top_loser}

AI Insight: {market_summary[:100]}...

Have a great trading day!
Generated by AI Trading Agent"""
    
    return message

def send_daily_notifications(recipient_email: str, recipient_phone: str, market_data: dict) -> dict:
    """
    Save both report and notification messages (free alternative to email/WhatsApp)
    """
    results = {'email': False, 'whatsapp': False}
    
    try:
        # Extract data
        market_summary = market_data.get('summary', 'Market data unavailable')
        top_gainers = market_data.get('gainers', [])
        top_losers = market_data.get('losers', [])
        ai_insights = market_data.get('ai_insights', {})
        nifty_change = market_data.get('nifty_change', 0)
        
        # Save email report
        email_body = format_daily_report_html(market_summary, top_gainers, top_losers, ai_insights)
        email_subject = f"Daily Market Report - {market_data.get('date', 'Today')}"
        
        results['email'] = save_report_notification(recipient_email, email_subject, email_body, "daily")
        
        # Save notification message
        top_gainer_name = top_gainers[0]['Symbol'] if top_gainers else 'N/A'
        top_loser_name = top_losers[0]['Symbol'] if top_losers else 'N/A'
        
        notification_message = format_notification_message(
            market_summary, nifty_change, top_gainer_name, top_loser_name
        )
        
        results['whatsapp'] = save_notification_message(recipient_phone, notification_message, "daily")
        
    except Exception as e:
        logging.error(f"Error sending daily notifications: {e}")
    
    return results

def send_alert_notification(recipient_email: str, recipient_phone: str, alert_type: str, message: str) -> dict:
    """
    Save alert notifications for urgent market events (free alternative to email/WhatsApp)
    """
    results = {'email': False, 'whatsapp': False}
    
    try:
        # Save alert report
        email_subject = f"{alert_type} Alert - AI Trading Agent"
        email_body = f"""
        <html>
        <body style="font-family: Arial, sans-serif;">
            <div style="background-color: #FF6B6B; color: white; padding: 20px; text-align: center;">
                <h1>Market Alert</h1>
            </div>
            <div style="padding: 20px;">
                <h2>{alert_type}</h2>
                <p>{message}</p>
                <p><em>Alert generated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} IST</em></p>
            </div>
        </body>
        </html>
        """
        
        results['email'] = save_report_notification(recipient_email, email_subject, email_body, "alert")
        
        # Save notification message
        notification_alert = f"{alert_type} Alert\n\n{message}\n\nAI Trading Agent"
        results['whatsapp'] = save_notification_message(recipient_phone, notification_alert, "alert")
        
    except Exception as e:
        logging.error(f"Error sending alert notification: {e}")
    
    return results

def get_saved_notifications(limit: int = 20) -> List[Dict]:
    """
    Retrieve saved notifications from file system
    """
    try:
        notifications_dir = "notifications"
        index_file = f"{notifications_dir}/index.json"
        
        if not os.path.exists(index_file):
            return []
        
        with open(index_file, 'r', encoding='utf-8') as f:
            notifications = json.load(f)
        
        # Return most recent notifications
        return notifications[-limit:] if notifications else []
        
    except Exception as e:
        logging.error(f"Error retrieving notifications: {e}")
        return []

def get_saved_reports(limit: int = 10) -> List[Dict]:
    """
    Retrieve saved reports from file system
    """
    try:
        reports_dir = "reports"
        if not os.path.exists(reports_dir):
            return []
        
        reports = []
        for filename in os.listdir(reports_dir):
            if filename.endswith('_meta.json'):
                try:
                    with open(f"{reports_dir}/{filename}", 'r', encoding='utf-8') as f:
                        report_meta = json.load(f)
                        reports.append(report_meta)
                except Exception as e:
                    logging.error(f"Error reading report {filename}: {e}")
        
        # Sort by timestamp (newest first)
        reports.sort(key=lambda x: x.get('timestamp', ''), reverse=True)
        return reports[:limit]
        
    except Exception as e:
        logging.error(f"Error retrieving reports: {e}")
        return []

def save_alert_notification(recipient: str, subject: str, message: str, alert_type: str = "alert") -> bool:
    """
    Save alert notification to file system
    """
    return save_notification_message(recipient, f"{subject}: {message}", alert_type)

def test_notification_setup() -> dict:
    """
    Test notification setup and return status (for free system)
    """
    test_results = {
        'reports_directory': False,
        'notifications_directory': False,
        'write_permissions': False,
        'system_status': 'Free notification system active'
    }
    
    try:
        # Test reports directory
        reports_dir = "reports"
        if not os.path.exists(reports_dir):
            os.makedirs(reports_dir)
        test_results['reports_directory'] = os.path.exists(reports_dir)
        
        # Test notifications directory
        notifications_dir = "notifications"
        if not os.path.exists(notifications_dir):
            os.makedirs(notifications_dir)
        test_results['notifications_directory'] = os.path.exists(notifications_dir)
        
        # Test write permissions
        test_file = f"{reports_dir}/test.txt"
        with open(test_file, 'w') as f:
            f.write("test")
        if os.path.exists(test_file):
            os.remove(test_file)
            test_results['write_permissions'] = True
        
    except Exception as e:
        logging.error(f"Notification setup test failed: {e}")
    
    return test_results